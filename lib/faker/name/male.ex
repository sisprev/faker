defmodule Faker.Name.Male do
  import Faker, only: [sampler: 2]

  @moduledoc """
  Functions for name data in Brazilian Portuguese
  """

  @doc """
  Returns a complete name (may include a suffix)

  ## Examples

      iex> Faker.Name.Male.name()
      "Leonardo Castelo Filho"
      iex> Faker.Name.Male.name()
      "João Miguel Macieira"
      iex> Faker.Name.Male.name()
      "Félix Bonfim"
  """
  @spec name() :: String.t()
  def name, do: name(Faker.random_between(0, 9))
  defp name(0), do: "#{first_name()} #{last_name()} #{suffix()}"

  defp name(n) when is_integer(n) do
    "#{first_name()} #{last_name()}"
  end

  @doc """
  Returns a random first name

  ## Examples

      iex> Faker.Name.Male.first_name()
      "César"
      iex> Faker.Name.Male.first_name()
      "Leonardo"
      iex> Faker.Name.Male.first_name()
      "Elísio"
  """
  @spec first_name() :: String.t()
  sampler(:first_name, [
    "Alessandro",
    "Alexandre",
    "Antônio",
    "Arthur",
    "Benício",
    "Benjamin",
    "Bernardo",
    "Breno",
    "Bryan",
    "Caio",
    "Carlos",
    "Cauã",
    "César",
    "Clara",
    "Daniel",
    "Danilo",
    "Davi",
    "Deneval",
    "Djalma",
    "Eduardo",
    "Elísio",
    "Emanuel",
    "Enrico",
    "Enzo",
    "Esther",
    "Fabiano",
    "Fábio",
    "Fabrício",
    "Feliciano",
    "Felipe",
    "Félix",
    "Francisco",
    "Frederico",
    "Gabriel",
    "Giovanna",
    "Gúbio",
    "Guilherme",
    "Gustavo",
    "Heitor",
    "Hélio",
    "Henrique",
    "Hugo",
    "Ígor",
    "Isaac",
    "Isabel",
    "João",
    "Joaquim",
    "Júlia",
    "Júlio",
    "Karla",
    "Kléber",
    "Ladislau",
    "Leonardo",
    "Lorenzo",
    "Lucas",
    "Lucca",
    "Marcela",
    "Marcelo",
    "Márcio",
    "Marcos",
    "Matheus",
    "Miguel",
    "Murilo",
    "Nataniel",
    "Nicolas",
    "Norberto",
    "Pablo",
    "Paulo",
    "Pedro",
    "Pietro",
    "Rafael",
    "Raul",
    "Ricardo",
    "Roberto",
    "Salvador",
    "Samuel",
    "Silas",
    "Sirineu",
    "Tertuliano",
    "Theo",
    "Thiago",
    "Thomas",
    "Vicente",
    "Víctor",
    "Vinicius",
    "Vitor",
    "Warley",
    "Washington",
    "Yago",
    "Yango",
    "Yuri",
    "André",
    "Anthony",
    "Arthur Gabriel",
    "Arthur Henrique",
    "Arthur Miguel",
    "Augusto",
    "Bento",
    "Bruno",
    "Calebe",
    "Carlos Eduardo",
    "Davi Lucas",
    "Davi Lucca",
    "Davi Luiz",
    "Davi Miguel",
    "Enzo Gabriel",
    "Enzo Miguel",
    "Erick",
    "Fernando",
    "Gabrielly",
    "Gael",
    "Henry",
    "Ian",
    "Igor",
    "Joao",
    "João Gabriel",
    "João Guilherme",
    "João Lucas",
    "João Miguel",
    "João Pedro",
    "João Vitor",
    "José",
    "Kaique",
    "Kauê",
    "Levi",
    "Liz",
    "Louise",
    "Luan",
    "Lucas Gabriel",
    "Luiz",
    "Luiz Felipe",
    "Luiz Gustavo",
    "Luiz Henrique",
    "Luiz Miguel",
    "Luiz Otávio",
    "Nathan",
    "Oliver",
    "Otávio",
    "Pedro Henrique",
    "Pedro Henrique",
    "Pedro Lucas",
    "Pedro Miguel",
    "Rodrigo",
    "Ruan",
    "Ryan",
    "Tiago",
    "Tomás",
    "Vinícius",
    "Vitor Hugo"
  ])

  @doc """
  Returns a random last name

  ## Examples

      iex> Faker.Name.Male.last_name()
      "Sá"
      iex> Faker.Name.Male.last_name()
      "das Neves"
      iex> Faker.Name.Male.last_name()
      "Castelo"
      iex> Faker.Name.Male.last_name()
      "Mendes"
  """
  @spec last_name() :: String.t()
  sampler(:last_name, [
    "Aguiar",
    "Albuquerque",
    "Almada",
    "Almeida",
    "Álvares",
    "Alves",
    "Ambrósio",
    "Amoreira",
    "Antena",
    "Antunes",
    "Aparício",
    "Aragão",
    "Arantes",
    "Araújo",
    "Aroeira",
    "Arriaga",
    "Assumpção",
    "Banheira",
    "Barata",
    "Barbosa",
    "Barreira",
    "Barreto",
    "Barros",
    "Barroso",
    "Batista",
    "Beltrão",
    "Bentes",
    "Bernardes",
    "Bittencourt",
    "Bomdia",
    "Bonfim",
    "Bouças",
    "Braga",
    "Brites",
    "Brum",
    "Bulhões",
    "Cabreira",
    "Cachoeira",
    "Caldas",
    "Caldeira",
    "Camacho",
    "Campos",
    "Cardoso",
    "Carneiro",
    "Carreira",
    "Carvalheira",
    "Carvalho",
    "Caseira",
    "Casqueira",
    "Castanheira",
    "Castanho",
    "Castelo",
    "Castro",
    "Cavalcanti",
    "Cerqueira",
    "Chaves",
    "Conceição",
    "Coqueiro",
    "Corrêa",
    "Corte",
    "Costa",
    "Coutinho",
    "Crespo",
    "Cruz",
    "Custódio",
    "da Aldeia",
    "da Bandeira",
    "da Barra",
    "da Barranca",
    "da Conceição",
    "da Costa",
    "da Cruz",
    "da Cunha",
    "da Fonseca",
    "da Fontoura",
    "da Fronteira",
    "da Gama",
    "da Luz",
    "da Madureira",
    "da Maia",
    "da Mata",
    "da Mota",
    "da Nóbrega",
    "da Paz",
    "da Penha",
    "da Rocha",
    "da Rosa",
    "da Silva",
    "da Silveira",
    "da Terra",
    "da Veiga",
    "Dantas",
    "das Neves",
    "Datena",
    "de Assunção",
    "de Borba",
    "de Lara",
    "de Lins",
    "de Oliveira",
    "de Quadros",
    "de Sá",
    "Dias",
    "Diegues",
    "do Prado",
    "Domingues",
    "Dorneles",
    "dos Reis",
    "Duarte",
    "Espinheira",
    "Espinhosa",
    "Esteves",
    "Farias",
    "Fernandes",
    "Ferraço",
    "Ferreira",
    "Figueira",
    "Filgueira",
    "Fogaça",
    "Fontes",
    "Fontinhas",
    "Franco",
    "Freitas",
    "Gabeira",
    "Galego",
    "Galvão",
    "Garcês",
    "Garcez",
    "Gentil",
    "Geraldes",
    "Godinho",
    "Godins",
    "Gomes",
    "Gomide",
    "Gonçalves",
    "Goulart",
    "Grotas",
    "Guedes",
    "Guterres",
    "Henriques",
    "Hermingues",
    "Hernandes",
    "Jaques",
    "Jesus",
    "Junqueira",
    "Laranjeira",
    "Leiria",
    "Lessa",
    "Lima",
    "Limeira",
    "Lobos",
    "Longuinho",
    "Lopes",
    "Louzada",
    "Macedo",
    "Macieira",
    "Madeira",
    "Mangueira",
    "Marcondes",
    "Marins",
    "Marques",
    "Martim",
    "Martins",
    "Matoso",
    "Meira",
    "Meireles",
    "Melo",
    "Mendanha",
    "Mendes",
    "Menendes",
    "Modesto",
    "Moniz",
    "Monteira",
    "Monteiro",
    "Moraes",
    "Morais",
    "Moreira",
    "Moreno",
    "Moura",
    "Munhoz",
    "Muniz",
    "Nascimento",
    "Negrão",
    "Neves",
    "Nogueira",
    "Novaes",
    "Nunes",
    "Oliveira",
    "Ordonhes",
    "Ornelas",
    "Ouriques",
    "Paes",
    "Paiva",
    "Palhares",
    "Palmeira",
    "Parreira",
    "Passarinho",
    "Pedroso",
    "Peixoto",
    "Pereira",
    "Peres",
    "Pimenta",
    "Pinheira",
    "Pinto",
    "Pires",
    "Porteira",
    "Porto",
    "Quaresma",
    "Quarteira",
    "Raia",
    "Ramalho",
    "Rameira",
    "Ramires",
    "Ramos",
    "Rebouças",
    "Rêgo",
    "Regueira",
    "Reis",
    "Resende",
    "Rezende",
    "Ribas",
    "Ribeira",
    "Ribeiro",
    "Rios",
    "Rocha",
    "Rodrigues",
    "Rolim",
    "Roriz",
    "Roseira",
    "Sá",
    "Sais",
    "Sales",
    "Sanches",
    "Santana",
    "Santos",
    "Saraiva",
    "Silva",
    "Silveira",
    "Simão",
    "Simões",
    "Siqueira",
    "Siqueiro",
    "Soares",
    "Soeira",
    "Solimões",
    "Souza",
    "Tavares",
    "Taveira",
    "Teixeira",
    "Teles",
    "Vasques",
    "Velasques",
    "Veles",
    "Veloso",
    "Viana",
    "Vidal",
    "Videira",
    "Vieira",
    "Vimaranes",
    "Viveiros",
    "Xavier",
    "Ximenes"
  ])

  @doc """
  Returns a random suffix

  ## Examples

      iex> Faker.Name.Male.suffix()
      "Jr."
      iex> Faker.Name.Male.suffix()
      "Filho"
      iex> Faker.Name.Male.suffix()
      "Jr."
      iex> Faker.Name.Male.suffix()
      "Filho"
  """
  @spec suffix() :: String.t()
  sampler(:suffix, [
    "Jr.",
    "Neto",
    "Filho"
  ])
end
